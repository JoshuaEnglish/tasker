Building the Pending Plugin
===========================

This is one of three tutorials on writing plugins for Tasker. 

The goal of the plugin is to allow the user to declare that a task should
be added to list with a Z priority (this is allowed by the main program) but
when a specific task is completed, then this new task should be prioritized
to A.

How this should look (ignoring timestamps)::

    > list
    1 Call Mom re +GarageSale to confirm date @phone 

    > after 1 Post to Craigslist
    added '(Z) Post to Craigslist +GarageSale'

    > list
    1 Call Mom re +GarageSale to confirm date @phone
   
    > do 1 She sez next Saturtday
    completed x Call Mom re +GarageSale to confirm date @phone # She sez next Saturday

    > list
    2 (A) Post to Craigslist +GarageSale


The first thing to code is the command `after` which needs to to be added 
to the main program. We want to use :class:`NewCommand` because we are creating
a single command to the main program with no sub commands.

First create the plugin description file.

.. literalinclude:: ..\tasker\plugins\PendingPlugin.tasker-plugin

Then create the basic plugin file::

    import re
    import argparse
     
    import basetaskerplugin
    
    class PendingPlugin(basetaskerplugin.NewCommandPlugin):
        def activate(self):
            self._log.debug('Activating Pending')
            
            # declare methods to add to the interactive prompt
            self.setConfigOption('public_methods', 'do_after')

            # automatically hide the pend extension
            if not self.hasConfigOption('hide_pend_ext'):
                self.setConfigOption('hide_pend_ext', 'true')
            
            self.after_parser = after = argparse.ArgumentParser('after')
            after.add_argument('tasknum', type=int,
                                 help="Task to create the follow-up task from")
            after.add_argument('text', nargs=argparse.REMAINDER)
    
            self.parsers = {
                after: "Add a follow-up task to a current task",
            }
    
            super().activate()

This code adds the `after` command to the command line interface. The line
`self.setConfigOption('public_methods', 'do_after')` tells Tasker to incorprate
the `do_after` method into the interactive program.

When plugins are loaded they are given `self.lib` to access the main library.
The standard library functions are available.

.. note::

    The library is not available to plugins in the `activate` method.

Next, we'll describe what `after` is supposed to do::

    class PendingPlugin(basetaskerplugin.NewCommandPlugin):
    
        ...

        def do_after(self, line):
            """Create a new task to be done after a current task is completed"""
            args = self.after_parser.parse_args(line.split())
            
            tasks = self.lib.get_tasks(self.lib.config['Files']['task-path'])
            source_stuff = self.lib.parse_task(tasks[args.tasknum])
            new_task = ' '.join(args.text)
            
            for context in source_stuff[5]:
                if context not in new_task:
                    new_task += " {}".format(context)
            for project in source_stuff[6]:
                if project not in new_task:
                    new_task += " {}".format(project)
                    
            for ext, val in list(source_stuff[7].items()):
                if ext in ['pend', 'uid']:
                    continue
                if "{%s:" % ext not in new_task:
                    new_task += " {%s:%s}" % (ext, val)
                else:
                    new_task = re.sub(r"{%s:([^}]*)}" % ext,
                                      r"{%s:%s}" % (ext, val),
                                      new_task)
            new_task += " {pend:%s}" % source_stuff[7]['uid']
            
            new_stuff = self.lib.parse_task(new_task)
            new_pri = new_stuff[1] if source_stuff[0] else 'Z'
            
            return self.lib.add_task(self.lib.graft(False, new_pri, *new_stuff[2:5]))

This method collects the tasks, parses both the follow-up task and the task
to base it off of, includes the contexts and projects to the new task, and
then finally adds the new task with a priority of 'Z'.

Now this plugin needs to watch for completed tasks and reprioritize the pending
task when the appropriate task is completed.

The :class:`TaskLib` instance runs through all active plugins when adding 
or completing tasks. A simple plugin hook method for completed tasks is::

    def complete_task(self, c, p, s, e, t, o, j, x):
        # do that thing you do
        return (0, "", c, p, s, e, t)

The hook method recieves all 9 objects from :meth:`TaskLib.parse_task` and 
is expected to return a return value, message, and the first 5 parsed items.
These items will be fed, eventually, into :meth:`TaskLib.graft`.

The return value should be 0 for successful operation and 2 for an error.
(1 is used in the core language.) The message is to be filled in only if
there is an error.

For this case, we don't need to change the task being completed, but an
entirely separate task.