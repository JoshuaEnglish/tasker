Basic Usage
===========

Tasker is a text based task manager that runs at the command line or within
Python. It is written in Python 3.5 but will most likely run in earlier
versions.

Tasker manager two files: `todo.txt` and `done.txt`.  Each task is saved on
a single line in either file.

The Anatomy of a Task
---------------------

Tasks have the following:

    * 'x ' if the task is completed
    * '(p)' if the task has a priority. Priorities are A-W.
    * 'datetime stamp' for the start of the task (default to time task is created)
    * 'datetime stamp' for the time the task was completed (if completed)
    * remaining text is the actual task

Tasks are organized by projects (words that begin with '+') and contexts (words
that begin with '@'). Tasks may also have extensions which are key:value pairs
wrapped in braces.

Here is an example of a pending task::

    (A) 2016-03-08T09:51:38 Finish +TaskerDocumentation @code {note: It's getting late}

This task has a priority. It has a project (TaskerDocumentation) and a context
(code) and a note.

Here is an example of a completed task::

    x 2016-03-07T11:45:08 2016-03-08T21:35:12 Call mom @phone

This task is complete and won't appear in the task list unless requested.


Basic Commands
--------------

The three basic commands are ``list``, ``add``, and ``do``. If no command is
given, the program lists all open tasks:

    C:\>tasker
    1 2016-03-04T22:04:30 test from cli
    2 2015-03-06T19:37:12 test add
    --
    2 tasks shown

    C:\>tasker add go to bed
    '2016-04-08T22:11:12 go to bed {uid:221112080316}'

    C:\>tasker list
    1 2016-03-04T22:04:30 test from cli
    2 2015-03-06T19:37:12 test add
    5 2016-03-08T22:11:12 go to bed
    --
    3 tasks shown

    C:\>tasker do 1
    'x 2016-03-08T22:16:02 2016-03-08T22:16:01 test from cli {uid:220430040316}'

    C:\>tasker
    2 2016-03-06T19:27:12 test add
    5 2016-03-08T22:11:12 go to bed
    --
    2 tasks shown

Tasker adds a ``uid`` extension to each task it creates

