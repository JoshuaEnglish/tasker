Plugin Primer
=============

Tasker uses two kinds of interfaces. The first interface is the command line
that relies on argparse to check the line sent from the system. This line
is then fed to the underlying cmd.Cmd object.

Currenty the only command line actions that are supported are ``list``, ``do``,
and ``add``. Enter the interpretive prompt to access all the features tasker
offers.

Quick Help
----------

To create new top-level commands at the interactive prompt
    Create a NewCommand plugin

To create new sub-programs with their own commands:
    Create a SubCommand plugin

To create new hooks

Running ``tasker -i`` or ``tasker --interactive`` enters the interactive
prompt.

:class:`TaskerCmd` is built on top of :class:`BossCmd`, a tool that allows
to add subprograms (called *minions*) that provide more functionality. Minions
can be loaded through the plugin system.

:class:`BossCmd` describes a top-level interactive prompt. :class:`MinionCmd`
describes a subprogram at the interactive prompt.

There are two ways to link a Minion to a Boss::

    Boss = BossCmd()

    # long way to add minion to boss
    Story = StoryCmd('story')
    Boss.add_minion('story', Story)

    # minions accept a boss
    Sub = SubmissionCmd('submission', Boss)
    Mark = MarketCmd('market', Boss)

The interactive prompt can move in and out of subprograms, and subprograms
can call eachother without stacking::

    >>> Boss.cmdloop()
    Boss> story
    story> submission
    submission> done
    Boss>

All MinionCmd instances have a ``done`` command that exits the subpgram and
returns to the parent BossCmd instance. MinionCmd instances also have a
``quit`` command that quits the program entirely.

If a MinionCmd instance can be called with a command, which will be executed,
then the program will return to the calling program::

    Boss> story help
    Help for StoryCmd
    Documented commands (type help <topic>):
    ========================================
    done  help  market  quit  submission

    Boss> submission
    submission> story help
    Help for StoryCmd
    Documented commands (type help <topic>):
    ========================================
    done  help  market  quit  submission

    submission>


Adding Commands to Tasker
-------------------------

To create a new command for the interactive prompt, create two files in the
``tasker_plugins`` directory:

.. literalinclude:: ../tasker/plugins/ReportsPlugin.tasker-plugin
   :language: ini
   :linenos:
   :caption: ReportsPlugin.yapsy-plugin
   :name: plugin-config-sample

.. literalinclude:: ../tasker/plugins/ReportsPlugin.py
   :language: python
   :linenos:
   :caption: ReportsPlugin.py
   :name: plugin-code-sample

The first file follows the rules set out by `YAPSY`_.

The Python code subclasses :class:`basetaskemanager.NewCommandClass`. Tasker
uses YAPSY's `ConfigurablePluginManager`_, which decorates plugin instances
with the following methods to access the Manager's ConfigParser instance
(which is same ConfigParser instance Tasker uses by default).

.. method:: hasConfigOption(name)

    Returns True if the config parser has the option for this plugin.

.. method:: getConfigOption(name)

    Returns the configuration entry

.. method:: setConfigOption(name, value)

    Sets the configuration entry

Use these methods initially in the activate method. Setting a ``public_methods``
configuration entry will cause the manager to copy the methods listed there
to the main :class:`TaskCmd` instance. The plugin will be assigned the
main TaskCmd instance through the ``.cli`` property

The next step is to define the public methods that will copy over. In this
example, the two methods call the plugin's private methods that are not
transferred over.

Finally, write the non ``do_`` methods, using ``self.cli`` to access TaskCmd.
See the :class:`TaskCmd` page for details.


Advanced Plugins with their own Library
=======================================

There may be a time when you need a plugin that is practically a fully-
functional application on its own. In my case, I found tracking tasks didn't
do a good enough job of keeping projects updated. I could never decide if I
should close a task with a note and recreate it, or add a completed task on
the project with a note, and if so, would I get a history based on open dates
or closed dates? I decided to create a dashboard plugin to let me manage on-
going projects that got updates that didn't correspond to actionable items.

I decided to store the dashboard in XML, a format I'm used to and have used in
other projects. I am using the built-in ``xml.etree.ElementTree`` module instead
of lxml, which means I have lost validation methods, but it should be more
portable.

In reviewing the Workflow plugin, which had been my most complicated plugin so
far, I realized that a lot of "library logic" was in the Client Line Interface,
and it should have been in the Plugin Object itself or in a separate library.

I decided to create the Dashboard using a standalone library file which I could
prototype outside of tasker and get the basic functionality established. This
also means that other APIs such as REST should be easier later on, if I decided
to finally build that out.

I wrote the library and made sure it printed nothing but returned Python objects
(dictionaries, lists, tuples) or raised errors.

Once the library worked well enough (some features aren't there yet, like
archiving a project from the dashboard into an archive), I realized I could
have created a CLI for it as is, but I wanted to create better integration
with tasker.

The DashboardLib object has the following API::

.. code::

    def list_projects(self):
        """Return list of project names in the dashboard file"""

    def new_project(self, projectid, name, background,
                    status=NEW, priority=NOW):
        """new_project(projectid, name background)
        Create a new project """

    def add_project_note(self, projectid, stub, text):
        """add_project_note(projectid, stub, text)
        Add a note to a project.

        stub is a small text description
        text is a longer text description """

    def complete_project(self, projectid, text):
        """complete_project(projectid, text)
        Add a note to the project that the project is closed. Set status to
        DONE.  """

    def get_dashboard_report(self):
        """Return (id, status, latest_timestamp, stub) tuples of
        dashboard items """

    def get_project_details(self, projectid, inorder=False):
        """get_project_details(projectid [, inorder=False])
        Return a dictionary containing the text of the project.
        Keys are:
            name
            background
            created
            modified
            status
            priority
            notes - a list of (time, stub, text) tuples

        Notes are sorted in chronological order if *inorder* is true, otherwise
        in reverse chronological order (the default).  """

    def update_priority(self, projectid, priority):
        """update_priority(projectid, priority)
        Update the projectid with the new priority. New priority must be
        "NOW", "LATER", "PENDING".  """

    def update_status(self, projectid, status):
        """update_status(projectid, status)
        Update the projectid with the new status. New status must be
        "NEW", "WORKING", "DONE", "ZOMBIED" """




.. _ConfigurablePluginManager: https://yapsy.readthedocs.org/en/latest/ConfigurablePluginManager.html
.. _YAPSY:  https://yapsy.readthedocs.org/en/latest/PluginManager.html#plugin-info-file-format

